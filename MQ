def mergeSort(l, left, right):
    center =  (left+right)//2
    if left< right:
        mergeSort(l, left, center)
        mergeSort(l, center+1, right)
        merge(l, left, center+1, right)
        
def merge(l, left, right, rightEnd):
    start=left
    leftEnd=right-1
    result=[]
    while left<=leftEnd and right<=rightEnd:
        if l[left]<=l[right]:
            result.append(l[left])
            left+=1
        if l[right]<l[left]:
            result.append(l[right])
            right+=1
    while left<= leftEnd: # copy remaining left half if any
        result.append(l[left])
        left+= 1
    while right<= rightEnd: # copy remaining right half if any
        result.append(l[right])
        right+= 1
    for ele in result: # copy result back to list l
        l[start] = ele
        start += 1
        if start > rightEnd:
            break
        

l = [5,3,6,1,2,7,8,4]
print(l)
mergeSort(l,0, len(l)-1)
print(l)

def quickSort(lst,left,right):
    if left<right:
        j=partition(lst,left,right)
        quickSort(lst,left,j-1)
        quickSort(lst,j+1,right)
    return lst

def partition(lst,left,right):
    p=lst[left]
    i=left+1
    j=right
    while i<j:
        while p<lst[j]:
            j-=1
        while lst[i]<p:
            if i==j:
                break
            i+=1
        if i<j:
            lst[i],lst[j]=lst[j],lst[i]
    lst[left],lst[j]=lst[j],lst[left]
    return j

l=[9,8,7,6,5,4,3,2,1]
print(quickSort(l,0,len(l)-1))
